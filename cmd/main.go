package main

import (
	"encoding/base64"
	"fmt"
	"github.com/mzky/x509o"
	"os"
)

var rootCer = `MIIFdTCCA12gAwIBAgIKEAAAAAAAAAAAADANBgkqhkiG9w0BAQsFADBmMQswCQYD
VQQGEwJDTjEQMA4GA1UECBMHQmVpSmluZzEQMA4GA1UEBxMHQmVpSmluZzERMA8G
A1UEChMIQ2VydEFpZGUxDTALBgNVBAsTBHBhd2QxETAPBgNVBAMTCHBhd2Ryb290
MCAXDTIxMDYxODA3MTE1MloYDzIwNTEwNjE3MDcxMTUyWjBmMQswCQYDVQQGEwJD
TjEQMA4GA1UECBMHQmVpSmluZzEQMA4GA1UEBxMHQmVpSmluZzERMA8GA1UEChMI
Q2VydEFpZGUxDTALBgNVBAsTBHBhd2QxETAPBgNVBAMTCHBhd2Ryb290MIICIjAN
BgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAzJ/kmWXaOakUIVYaVqrTJL1hTBzv
ctSaRWt7jbW9g/PhOoYQNKAFlOLaOQNwFPpQhseTtk+uIHolu4buX26UDWAkiYuR
bvg3FrqhGgfuV6bk2QuBkuB5szw60cKTlR3Mwigh9/r66FxnqBhOTUH9QP9UGD4C
mA8Y5gWH4RD72Br4YZhWWXr6L8rLqLQV1scw1cdJ0ezHWy0q7PKEj3DSRaQ7Vk6B
5ptXXd3cGDd/siEAKiV3+EW+i9ADkI55VjsT+1k9Tppk0YSAXpJ4dVvCXiBOv1p8
09uPUZVmBPOJCR/oeBfNOzFFcCb2IFT78aCadhfiI2kuYaVE2s9mDHMoJ+58WMaT
hIK2I8sN/L7COMFOgl19TZD+jmtf4uUV0/uzmCjtLDiL6GoZBqt6MLUuUnf+cxJZ
RtxbeLIdMmTdnDsB2Tu+wum8iRZUqlgUzW0iwpsjmR7m+1b/h4j5t6W3rCxLpnQZ
oVchpQY54biycZTMGapGmJvP9c1hZhXyx3rpnhCVBBNv/UVY+M8Q8oS96cHbYO31
A6S5x5cEMmlVUz8tVjeVaofXGKW23khT7jBxOWI78tm6VHSFILHM1Mn8p/ctfd4C
K2wrvZ7lYKeqIspVVhVR4WRcnycdB0ywXGFLSLL3OmmCeRoSCu4bhu3vft7Ezj3b
uM33fIG0CpFGMXcCAwEAAaMjMCEwDwYDVR0TAQH/BAUwAwEB/zAOBgNVHQ8BAf8E
BAMCAQYwDQYJKoZIhvcNAQELBQADggIBAA0+FPSlk2njwKkCtZcgA06C+bpsfuYR
KUGGHHhX3vj2i1Hty6gdrSoULRUOrptYWtBFx31+fBqkrB1610hMpLLJo7Dxs4mz
Wak74OGtjvPNyFmLsassr9gkM79wHJNnGJQfhkQnVDdK8LfoZmo8B9cHBas0nqhT
llhxgh0x1qFNyLn3aYFqRk4VZHJqKay9WCOyQapngZXtTEdj48fmJIbj9zzZ5Tko
wn5AibDWLD07veDyB8oasO+argfnLflFwABjjQscOwPSx0rjBD36YVuamR8O4fL8
eNsli8HvT924617x6Sv5joC2FANcrqtAFOH69Rpvh8wdMdvOFgb7oQJUKPgD7GJL
7DCLcYG7HtLTKpTRNclGXfNzXjFj5hMSsMQL7Q9Sl9XL5k5a63AOuLgkFGA2Ajn0
cyogsTqb93vNMHdKHHGedH5F82rYQLP/7PDQ0amajwtwKKX04HrSWUYmv4BAOWvA
fMMlVw42hzve75A16nz2jBGzDrsHeu2xa87wTnl4ixMwo7clcR+ZBuU8lAx5BRJ2
neuUh+IKFkOPAtVxSmAL0qFeZRWvqqhMDzVK8pIVvknDafreVCoHUuuT+18zIMeO
Hw51OozFVfzXoQYlanTEqCEvsT3lerGOCj37VXU2YdLztWqMf81g5KJA4mhbl8C1
pZcuKYPcZKoM`
var sCer = `MIIFdTCCA12gAwIBAgIKEAAAAAAAAAAAADANBgkqhkiG9w0BAQsFADBmMQswCQYD
VQQGEwJDTjEQMA4GA1UECBMHQmVpSmluZzEQMA4GA1UEBxMHQmVpSmluZzERMA8G
A1UEChMIQ2VydEFpZGUxDTALBgNVBAsTBHBhd2QxETAPBgNVBAMTCHBhd2Ryb290
MCAXDTIxMDYxODA3MTE1MloYDzIwNTEwNjE3MDcxMTUyWjBmMQswCQYDVQQGEwJD
TjEQMA4GA1UECBMHQmVpSmluZzEQMA4GA1UEBxMHQmVpSmluZzERMA8GA1UEChMI
Q2VydEFpZGUxDTALBgNVBAsTBHBhd2QxETAPBgNVBAMTCHBhd2Ryb290MIICIjAN
BgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAzJ/kmWXaOakUIVYaVqrTJL1hTBzv
ctSaRWt7jbW9g/PhOoYQNKAFlOLaOQNwFPpQhseTtk+uIHolu4buX26UDWAkiYuR
bvg3FrqhGgfuV6bk2QuBkuB5szw60cKTlR3Mwigh9/r66FxnqBhOTUH9QP9UGD4C
mA8Y5gWH4RD72Br4YZhWWXr6L8rLqLQV1scw1cdJ0ezHWy0q7PKEj3DSRaQ7Vk6B
5ptXXd3cGDd/siEAKiV3+EW+i9ADkI55VjsT+1k9Tppk0YSAXpJ4dVvCXiBOv1p8
09uPUZVmBPOJCR/oeBfNOzFFcCb2IFT78aCadhfiI2kuYaVE2s9mDHMoJ+58WMaT
hIK2I8sN/L7COMFOgl19TZD+jmtf4uUV0/uzmCjtLDiL6GoZBqt6MLUuUnf+cxJZ
RtxbeLIdMmTdnDsB2Tu+wum8iRZUqlgUzW0iwpsjmR7m+1b/h4j5t6W3rCxLpnQZ
oVchpQY54biycZTMGapGmJvP9c1hZhXyx3rpnhCVBBNv/UVY+M8Q8oS96cHbYO31
A6S5x5cEMmlVUz8tVjeVaofXGKW23khT7jBxOWI78tm6VHSFILHM1Mn8p/ctfd4C
K2wrvZ7lYKeqIspVVhVR4WRcnycdB0ywXGFLSLL3OmmCeRoSCu4bhu3vft7Ezj3b
uM33fIG0CpFGMXcCAwEAAaMjMCEwDwYDVR0TAQH/BAUwAwEB/zAOBgNVHQ8BAf8E
BAMCAQYwDQYJKoZIhvcNAQELBQADggIBAA0+FPSlk2njwKkCtZcgA06C+bpsfuYR
KUGGHHhX3vj2i1Hty6gdrSoULRUOrptYWtBFx31+fBqkrB1610hMpLLJo7Dxs4mz
Wak74OGtjvPNyFmLsassr9gkM79wHJNnGJQfhkQnVDdK8LfoZmo8B9cHBas0nqhT
llhxgh0x1qFNyLn3aYFqRk4VZHJqKay9WCOyQapngZXtTEdj48fmJIbj9zzZ5Tko
wn5AibDWLD07veDyB8oasO+argfnLflFwABjjQscOwPSx0rjBD36YVuamR8O4fL8
eNsli8HvT924617x6Sv5joC2FANcrqtAFOH69Rpvh8wdMdvOFgb7oQJUKPgD7GJL
7DCLcYG7HtLTKpTRNclGXfNzXjFj5hMSsMQL7Q9Sl9XL5k5a63AOuLgkFGA2Ajn0
cyogsTqb93vNMHdKHHGedH5F82rYQLP/7PDQ0amajwtwKKX04HrSWUYmv4BAOWvA
fMMlVw42hzve75A16nz2jBGzDrsHeu2xa87wTnl4ixMwo7clcR+ZBuU8lAx5BRJ2
neuUh+IKFkOPAtVxSmAL0qFeZRWvqqhMDzVK8pIVvknDafreVCoHUuuT+18zIMeO
Hw51OozFVfzXoQYlanTEqCEvsT3lerGOCj37VXU2YdLztWqMf81g5KJA4mhbl8C1
pZcuKYPcZKoM`

func main() {
	r, err := xPems(rootCer)
	if err != nil {
		fmt.Println(err)
		os.Exit(0)
	}
	s, err := xPems(sCer)
	if err != nil {
		fmt.Println(err)
		os.Exit(0)
	}
	fmt.Println(r.CheckSignatureFrom(s))

}

func xPems(c string) (*x509o.Certificate, error) {
	pbCert, err := base64.RawStdEncoding.DecodeString(c)
	if err != nil {
		return nil, err
	}

	xCert, err := x509o.ParseCertificate(pbCert)
	if err != nil {
		return xCert, err
	}

	return xCert, nil
}
